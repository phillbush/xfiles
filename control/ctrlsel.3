.Dd July 18, 2024
.Dt CTRLSEL 3
.Os libcontrol
.Sh NAME
.Nm ctrlsel_gettargets ,
.Nm ctrlsel_request ,
.Nm ctrlsel_own ,
.Nm ctrlsel_answer
.Nd acquire selection ownership, and answer/request selection conversion
.Sh SYNOPSIS
.In X11/Xlib.h
.In ctrlsel.h
.Ft ssize_t
.Fo ctrlsel_request
.Fa "Display *display"
.Fa "Time timestamp"
.Fa "Atom selection"
.Fa "Atom target"
.Fa "unsigned char **pbuf"
.Fc
.Ft ssize_t
.Fo ctrlsel_gettargets
.Fa "Display *display"
.Fa "Time timestamp"
.Fa "Atom selection"
.Fa "Atom **ptargets"
.Fc
.Ft Time
.Fo ctrlsel_own
.Fa "Display *display"
.Fa "Window owner"
.Fa "Time timestamp"
.Fa "Atom selection"
.Fc
.Ft int
.Fo ctrlsel_answer
.Fa "XEvent const *event"
.Fa "Time epoch"
.Fa "Atom const targets[]"
.Fa "size_t ntargets"
.Fa "ssize_t (*callback)(void *arg, Atom target, unsigned char **pbuf)"
.Fa "void *arg"
.Fc
.Sh ARGUMENTS
.Bl -tag -width Ds
.It Fa arg
Points to an object to be given to the
.Fa callback
function.
.It Fa callback
The function to be called by
.Fn ctrlsel_answer
to convert the selection into a supported target.
.It Fa display
Points to the context of connection to the
.Xr Xserver 1 .
.It Fa epoch
The time of the beginning of the selection ownership.
Its value should be the last successful ownership timestamp returned by
.Fn ctrlsel_own .
.It Fa event
Points to the
.Xr XEvent 3
notifying the owner to answer a request made by another client.
Its
.Va display
member must be the
.Ft Display
pointer given to
.Fn ctrlsel_own .
.It Fa ntargets
The number of atoms in the
.Fa targets
array.
.It Fa owner
The window to acquire selection ownership for.
.It Fa pbuf
Where to store the address to the converted selection content.
The caller is responsible for freeing it.
.It Fa ptargets
Where to store the array of targets supported by the selection owner.
The caller is responsible for freeing it.
.It Fa selection
The atom naming the selection to be owned/converted.
.It Fa target
The atom naming the target into which the
.Fa selection
conversion has been requested.
.It Fa targets
The array of targets into which the caller supports converting the selection.
.It Fa timestamp
The time of the event that triggered the ownership acquisition
.Po
for
.Fn ctrlsel_own
.Pc ,
or the conversion request
.Po
for
.Fn ctrlsel_request
and
.Fn ctrlsel_gettargets
.Pc .
If its value is the
.Dv CurrentTime
constant,
the current time is fetch from the X server
(passing that value should be avoided,
since it depends on asking the server).
.El
.Sh DESCRIPTION
.Fn ctrlsel_request
requests the conversion of
.Fa selection
into
.Fa target ,
storing the converted content into
.Fa *pbuf
The return value is as follows:
.Bl -bullet
.It
A positive number, if the selection has been successfully converted.
The return value is the size in bytes of the converted content;
and
.Fa *pbuf
is set to the address of the converted content.
It is the responsibility of the caller to free
.Fa *pbuf
with
.Xr XFree 3
when it is no longer needed.
.It
Zero, if no conversion has been made.
Either there is no owner for the requested selection;
or the selection owner refused the request;
or the selection owner does not support converting into the requested target;
or some server error (eg', could not get server time).
.It
A negative number, if an error occurred while attempting a conversion.
See
.Sx ERRORS
below.
.El
.Pp
.Fn ctrlsel_gettargets
requests the selection owner for the targets it supports converting
.Fa selection
to.
The return value is as follows:
.Bl -bullet
.It
A positive number, if the owner answered the targets it supports.
The return value is the number of targets it supports;
and
.Fa *ptargets
is set to the array of supported targets.
It is responsibility of the caller to free
.Fa *ptargets
with
.Xr XFree 3
when it is no longer needed.
.It
Zero, if there is no owner for
.Fa selection ;
or the owner is buggy and did not answer.
.It
A negative number, if an error occurred while attempting asking the selection owner.
See
.Sx ERRORS
below.
.El
.Pp
.Fn ctrlsel_own
acquires the ownership of
.Fa selection
for the
.Fa owner
window.
It returns the timestamp of the ownership exchange
(which is either the given
.Fa timestamp ,
or the server time);
or zero if the ownership acquisition failed.
On success, the caller should respond to the following
.Xr XEvent 3 Ns s :
.Bl -tag -width Ds
.It Dv SelectionRequest
If
.Xr XSelectionRequestEvent 3 Ap s
.Va owner
and
.Va selection
members are the same as those given to
.Fn ctrlsel_own ,
then another client has requested the selection.
If so,
.Fn ctrlsel_answer
should be called to answer the requestor.
.It Dv SelectionClear
If
.Xr XSelectionClearEvent 3 Ap s
.Va owner
and
.Va selection
members are the same as those given to
.Fn ctrlsel_own ,
then the owner has lost the selection ownership.
If so, the program should not respond to any further event related to that selection
until its ownership is acquired again.
.El
.Pp
The application should call
.Fn ctrlsel_request ,
.Fn ctrlsel_gettargets ,
and
.Fn ctrlsel_own
after an event trigger the ownership acquisition or conversion request.
The
.Fa timestamp
passed to those functions is the timestamp associated with that event.
If no event triggered them, the value
.Dv CurrentTime
must be given instead
(doing so is not recommended;
that adds overhead to the functions by asking the server for the current time).
.Pp
.Fn ctrlsel_answer
answers the conversion request made by another client.
It must be given the array of supported targets,
and a pointer to the
.Xr XEvent 3
that has delivered the
.Dv SelectionRequest
event.
The
.Fa epoch
argument must be the timestamp returned by a previous call to
.Fn ctrlsel_own .
A conversion request is only answered if it has occurred after
.Fa epoch ;
to ignore the conversion request, call it with
.Fa epoch
as zero.
It returns zero on success, and a negative number on error (see
.Sx ERRORS
below).
.Pp
If
.Fn ctrlsel_answer
is answering a request to convert into a supported target, the
.Fa callback
function is called to inform the converted content.
It must return the size in bytes of the converted content;
and must set
.Fa *pbuf
to the address of the content.
.Fn ctrlsel_answer
will not free
.Fa *pbuf
nor change the data it points to.
If nothing should be answered (so the request is ignored),
it must return a negative value instead (no matter the value).
.Sh EXAMPLES
The following code illustrates a simple event loop of a selection owner.
The owner window acquires the selection ownership whenever the first mouse button is pressed;
and deals with selection clear and selection request events.
Variable initialization, error handling, and loop termination are not illustrated.
.Bd -literal -offset indent
Display *display;
XEvent event;
Window owner;
Time epoch;
Atom selection;
Atom targets[NTARGETS];
int error;
ssize_t (*callback)(void *arg, Atom target, unsigned char **pbuf);

\&...
epoch = 0;
while (!XNextEvent(display, &event)) switch (event.type) {
case ButtonPress:
	if (event.xbutton.button != Button1)
		break;
	epoch = ctrlsel_own(
		display, owner,
		event.xbutton.time, selection
	);
	if (epoch == 0)
		fprintf(stderr, "ctrlsel: could not own selection\n");
	break;
case SelectionClear:
	if (event.xselectionclear.window != owner)
		break;
	if (event.xselectionclear.selection != selection)
		break;
	epoch = 0;
	break;
case SelectionRequest:
	if (event.xselectionrequest.owner != owner)
		break;
	if (event.xselectionrequest.selection != selection)
		break;
	if (epoch == 0)
		break;
	error = ctrlsel_answer(
		&event, epoch,
		targets, NTARGETS,
		callback, NULL
	);
	if (error != 0)
		fprintf(stderr, "ctrlsel: %s", strerror(-error));
	break;
}
.Ed
.Sh ERRORS
The
.Fn ctrlsel_request ,
.Fn ctrlsel_gettargets ,
and
.Fn ctrlsel_answer
functions return a negative value on error.
.Pp
The following error constant negations may be returned on error:
.Bl -tag -width Er
.It Er \-ENOMEM
The function was unable to allocate memory.
.It Er \-ETIMEDOUT
The server or the other client did not respond after a period of time.
This error is not fatal;
for example, the other client is busy or froze.
The program should not take any severe action like termination in such case,
usually printing an warning message is enough.
.It Er \-EMSGSIZE
The transmitted data is too large for a single protocol request.
.El
.Pp
Other error constants may be returned (in negative),
if generated by a system call or standard library error.
.Sh SEE ALSO
.Xr X 7
.Rs
.%T Xlib - C Language X Interface
.%U https://www.x.org/releases/current/doc/libX11/libX11/libX11.html
.%Q X Consortium Standard
.Re
.Rs
.%T Inter-Client Communication Conventions Manual
.%U https://www.x.org/releases/current/doc/xorg-docs/icccm/icccm.html
.%Q X Consortium Standard
.Re
.Sh CAVEATS
.Fn ctrlsel_answer
may call the
.Fa callback
function more than once, if it is answering a request to convert into multiple targets.
The program should keep track of the data pointed by
.Fa *pbuf ,
if it has been dynamically allocated.
.Sh BUGS
These functions are synchronous, even that X selection mechanism is asynchronous.
Since selection conversion is an operation triggered by the user and notified to the user,
it is supposed to be completed quickly.
A slow copy-and-paste operation is expected to be an error.
If it takes too long to finish, a function returns
.Er \-ETIMEDOUT .
.Pp
Requesting conversion into the
.Dv MULTIPLE
target is not supported.
Clients rarely do it,
since targets are just different data formats of the content,
or even the exact same data just labeled under equivalent formats
(like
.Dv STRING
and
.Dv TEXT ) .
If it is really needed to convert a selection into multiple targets, just call
.Fn ctrlsel_request
for each target, passing the same
.Fa time
argument to each call.
Answering a multiple selection request is supported by
.Fn ctrlsel_answer ,
though.
.Pp
These functions only support converting into targets of 8-bit format.
Targets of 32-bit format are almost only used for selection metadata
(like the selection timestamp/epoch and list of supported targets),
which are already answered by
.Fn ctrlsel_answer
without caller intervention.
And targets of 16-bit format do not even exist.
If it is really needed to convert a selection into a 32 or 16-bit target,
that must be done manually.
.Pp
The
.Fn ctrlsel_answer
function does not support answering a selection request incrementally.
If the selection data is too large, it will fail with
.Er \-EMSGSIZE .
This should not be a problem.
Modern X servers have the Big Requests Extension,
under which a protocol request can be up to 16 MiB long
(that number would be 256 KiB).
In any case, data large enough to fail with
.Er \-EMSGSIZE
are probably too large to be user\-selected or \-copied.
.Pp
However, the
.Fn ctrlsel_request
function does support fetching selection data incrementally;
thus being able to get the selection from clients with bad incremental response
(which send data incrementally in chunks way smaller than the maximum protocol request size).
Also, incremental conversion is easier to implement on the requestor side.
.Pp
The implementation of these functions is not thread-safe.
They set XLib's internal error handler function, which is a global value;
although they reset to its original value before returning.
